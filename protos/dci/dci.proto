syntax = "proto3";
package dci;

option go_package = "github.com/tendermint/tendermint/abci/types";

import "gogoproto/gogo.proto";

enum CheckTxType {
    NEW = 0 [(gogoproto.enumvalue_customname) = "New"];
    RECHECK = 1 [(gogoproto.enumvalue_customname) = "Recheck"];
}
message RequestTxPackage {
    bytes tx = 1;
    Chain target_id = 2;
    Node node_id = 3;
}

message RequestRouterInfo {
    uint32 tx = 1;
}

message Chain {
    string identifier  = 1;
}

message Node {
    string identifier  = 1;
}

message RequestRouterTransmit {
    Chain           source      = 1;
    Chain           target      = 2;
    uint32          ttl         = 3;
    repeated Chain  paths       = 4;
}

message RequestRouterPathCallback {
    Chain           source      = 1;
    Chain           target      = 2;
    repeated Chain  paths       = 3;
}

message RequestSwitchCommunity {
    string target_community = 1;
}

message RequestCommunityInfo {
    int32 info_level = 1;
}

message RequestCommunityConfig {
    bool auto_switch = 1;
    int32 max_peer_number = 2;
    string algorithm = 3;
}

message Event {
    string                  type       = 1;
    repeated EventAttribute attributes = 2 [
        (gogoproto.nullable) = false,
        (gogoproto.jsontag)  = "attributes,omitempty"
    ];
}

// EventAttribute is a single key-value pair, associated with an event.
message EventAttribute {
    bytes key   = 1;
    bytes value = 2;
    bool  index = 3;  // nondeterministic
}

message ResponseTxPackage {
    uint32 code = 1;
    bytes packaged_tx = 2;
    Chain target_id = 3;
    Node node_id = 4;
    bytes ttl = 5;
}

message ResponseRouterInfo {
    uint32         code       = 1;
    bytes          data       = 2;
    string         info       = 3;  // nondeterministic
}

message ResponseRouterTransmit {
	uint32 			code 		= 1;
	string 			info 		= 2;
}

message ResponseRouterPathCallback {
    uint32          code        = 1;
    string          info        = 2;
}

message ResponseSwitchCommunity {
    uint32         code       = 1;
    bytes          info       = 2;
}

message ResponseCommunityInfo {
    string community_id = 1;
    string node_id = 2;
}

message ResponseCommunityConfig {
    uint32         code       = 1;
    bytes          data       = 2;
    string         log        = 3;  // nondeterministic
    string         info       = 4;  // nondeterministic
    string code_space = 8;
}

service Dock {
    rpc PackageTx(RequestTxPackage) returns (ResponseTxPackage);

    rpc RouterInfo(RequestRouterInfo) returns (ResponseRouterInfo);
    rpc RouterTransmit(RequestRouterTransmit) returns (ResponseRouterTransmit);
    rpc RouterPathCallback(RequestRouterPathCallback) returns (ResponseRouterPathCallback);

    rpc SwitchCommunity(RequestSwitchCommunity) returns (ResponseSwitchCommunity);
    rpc CommunityInfo(RequestCommunityInfo) returns (ResponseCommunityInfo);
    rpc CommunityConfig(RequestCommunityInfo) returns (ResponseCommunityInfo);
}
