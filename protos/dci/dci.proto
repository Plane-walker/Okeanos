syntax = "proto3";
package dci;

option go_package = "github.com/tendermint/tendermint/abci/types";

import "common/id.proto";

message RequestDeliverTx {
    bytes tx = 1;
    common.Chain source = 2;
    common.Chain target = 3;
    string  flag = 4;
}

message RequestRouterInfo {
    uint32 tx = 1;
}

message RequestRouterTransmit {
    common.Chain source = 1;
    common.Chain target = 2;
    uint32 ttl = 3;
    repeated common.Chain paths = 4;
}

message RequestRouterPathCallback {
    common.Chain source = 1;
    common.Chain target = 2;
    repeated common.Chain paths = 3;
}

message RequestSwitchIsland {
    string target_community = 1;
}

message RequestUpdateGraphData {
    string app_id = 1;
    string chain_id = 2;
    uint32 increase_weight = 3;
}

message RequestGetGraphData {
    string app_id = 1;
}

message ResponseDeliverTx {
    uint32 code = 1;
}

message ResponseRouterInfo {
    uint32 code = 1;
    bytes data = 2;
    string info = 3;
}

message ResponseRouterTransmit {
	uint32 code = 1;
	string info = 2;
}

message ResponseRouterPathCallback {
    uint32 code = 1;
    string info = 2;
}

message ResponseSwitchIsland {
    uint32 code = 1;
    string info = 2;
}

message ResponseUpdateGraphData {
    uint32 code = 1;
    string info = 2;
}

message ResponseGetGraphData {
    repeated string app_id = 1;
    repeated uint32 weight = 2;
    repeated string chain_id = 3;
}

service Dock {
    rpc DeliverTx(RequestDeliverTx) returns (stream ResponseDeliverTx);

    rpc RouterInfo(RequestRouterInfo) returns (stream ResponseRouterInfo);
    rpc RouterTransmit(RequestRouterTransmit) returns (stream ResponseRouterTransmit);
    rpc RouterPathCallback(RequestRouterPathCallback) returns (stream ResponseRouterPathCallback);

    rpc SwitchIsland(RequestSwitchIsland) returns (ResponseSwitchIsland);
    rpc UpdateGraphData(RequestUpdateGraphData) returns (ResponseUpdateGraphData);
    rpc GetGraphData(RequestGetGraphData) returns (ResponseGetGraphData);
}
