syntax = "proto3";
package dci;

option go_package = "github.com/tendermint/tendermint/abci/types";

import "common/id.proto";

message RequestDeliverTx {
    bytes tx = 1;
    common.Chain source = 2;
    common.Chain target = 3;
    string type = 4;
    int32 ttl = 5;
    repeated common.Chain paths = 6;
}

message RequestQuery {
    bytes tx = 1;
    common.Chain source = 2;
    common.Chain target = 3;
    string type = 4;
    int32 ttl = 5;
    repeated common.Chain paths = 6;
}

message RequestRouterInfo {
    uint32 tx = 1;
}

message RequestRouterTransmit {
    common.Chain source = 1;
    common.Chain target = 2;
    uint32 ttl = 3;
    repeated common.Chain paths = 4;
}

message RequestRouterPathCallback {
    common.Chain source = 1;
    common.Chain target = 2;
    repeated common.Chain paths = 3;
}

message RequestShard {
    string graph_state = 1;
}

message ResponseDeliverTx {
    uint32 code = 1;
}

message ResponseQuery {
    uint32 code = 1;
}

message ResponseRouterInfo {
    uint32 code = 1;
    bytes data = 2;
    string info = 3;
}

message ResponseRouterTransmit {
	uint32 code = 1;
	string info = 2;
}

message ResponseRouterPathCallback {
    uint32 code = 1;
    string info = 2;
}

message ResponseShard{
    uint32 code = 1;
    string info = 2;
}



service Dock {
    rpc DeliverTx(RequestDeliverTx) returns (ResponseDeliverTx);
    rpc Query(RequestQuery) returns (ResponseQuery);

    rpc RouterInfo(RequestRouterInfo) returns (ResponseRouterInfo);
    rpc RouterTransmit(RequestRouterTransmit) returns (ResponseRouterTransmit);
    rpc RouterPathCallback(RequestRouterPathCallback) returns (ResponseRouterPathCallback);

    rpc Shard(RequestShard) returns (ResponseShard);
}
